{% extends 'base.html.twig' %}

{% block title %}{{ 'app.rules-page.title' | trans }} - {{ parent() }}{% endblock %}

{% block content %}
    <div class="bg-primary">
        <div class="container text-justify">
            <h1>
                {{ 'app.rules-page.title' | trans }}
                <small>
                    {{ 'app.global.title' | trans }}
                </small>
            </h1>
            <p class="lead">
                The idea is quite simple: You have to <strong>create a <a href="#api-documentation">REST API</a></strong>
                to <strong>move a player</strong> across a random generated board. In this board there will also be a
                number of <strong>enemies</strong> and the other players. You will be able to <strong>move</strong> or
                <strong>fire</strong> at any direction (up, down, left or right), but you will have limited shots.
            </p>
            <p class="lead">
                You will know the size of the board, the position of your character and some other data, but you won't
                see the entire board. The game engine will call your API, sending the current conditions, and your API
                will have to respond with your next move: <code>up</code>, <code>down</code>, <code>left</code>,
                <code>right</code>, <code>fire-up</code>, <code>fire-down</code>, <code>fire-left</code>
                or <code>fire-right</code>.
            </p>
        </div>
    </div>

    <div class="bg-success">
        <div class="container text-justify">
            <h2>
                The game
            </h2>
            <p class="lead">
                The game board is a matrix of <code>N x M</code> cells containing a randomly generated maze.
                The width and the height are configurable and can vary from one game to another.
                Width: <code>10 &le; N &le; 50</code>, height: <code>10 &le; M &le; 25</code>.
                Each cell of the game can contain only one item at the same time: a wall, a player or an enemy.
            </p>
            <div class="row">
                <div class="col-sm-12 col-md-6">
                    <p>
                        <img class="img-responsive" src="{{ asset('images/halloween-screen01.png') }}">
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/halloween-player-ghost-right.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                The <strong>player's character</strong> is moved by the
                                <a href="#api-documentation">player's REST API</a>. The game engine can manage up to 9
                                different players concurrently on the same board.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/halloween-pumpkin-evil.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                The <strong>enemies</strong> will kill you if they catch you. They move
                                randomly across the board. The number of enemies in the game and the spawn frequency
                                can be configured and it changes from game to game.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/halloween-pumpkin-neutral.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                When a new enemy is born, he is <strong>neutral</strong> for some movements.
                                A neutral enemy cannot kill a player, but players can kill neutral enemies by
                                touching them. After a few movements a neutral enemy becomes a regular enemy.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/halloween-player-tombstone.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                When a player is killed, it remains <strong>dead</strong> for some movements. A killed player
                                will respawn in the same place where he was killed.
                            </p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-2">
                            <p>
                                <img class="img-responsive" src="{{ asset('images/halloween-lightning-bolt-right.png') }}">
                            </p>
                        </div>
                        <div class="col-xs-10">
                            <p class="lead">
                                Players can <strong>shoot</strong> to the enemies or to the other players.
                                f a shot hunts a player or an enemy, it kills him. Shots have a limited range.
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <p class="lead">
                The shots are instantaneous, but limited to the
                <a href="#visible-area"><strong>visible area</strong></a>. If two players shoot each other, both are
                killed. After shooting, a player must reload and he cannot shoot again until a few movements.
            </p>

            <p class="lead">
                If two or more players try to occupy the <strong>same cell</strong> at the same time, they are
                <strong>all killed</strong>.
                If a player occupies the same cell as an enemy, one of them dies.
                If the enemy is neutral, he dies.
                Otherwise, the player is the one who dies.
            </p>

            <p class="lead">
                The game engine processes all the <strong>movements</strong> from the players and then the
                <strong>shots</strong>. So a player can dodge a shot. When all the movements and the shots are
                processed the game engine moves the <strong>enemies</strong>. So the enemies cannot dodge a shot.
            </p>

            <p class="lead">
                The length of the game is defined by the number of movements which is a configurable parameter of the
                game (<code>50</code> to <code>5000</code>).
                In every movement, a call is made to each of the players' APIs and all responses are processed.
                The players' APIs have a timeout of <code>3</code> seconds.
                If an API does not respond before the timeout, its movement is considered null.
                Since all calls are made in parallel, each movement takes a maximum of 3 seconds.
                So a game of 50 movements will take 2.5 seconds maximum.
            </p>
        </div>
    </div>

    <div class="bg-danger">
        <div class="container text-justify">

            <div class="rules-logo pull-right visible-lg">
                <img
                    src="{{ asset('images/halloween-logo.png') }}"
                    alt="{{ 'app.global.name' | trans }}"
                    title="{{ 'app.global.name' | trans }}"
                    class="img-responsive"
                />
            </div>

            <div class="rules-logo-mobile hidden-lg">
                <img
                    src="{{ asset('images/halloween-logo.png') }}"
                    alt="{{ 'app.global.name' | trans }}"
                    title="{{ 'app.global.name' | trans }}"
                    class="img-responsive"
                />
            </div>

            <h2>
                Rules
            </h2>

            <h3>
                Basics
            </h3>

            <ul class="lead">
                <li>
                    The <strong>Code Challenge 2020</strong> is a programming competition.
                </li>
                <li>
                    It's open to <strong>all Veepee employees</strong>, particularly to <strong>vpTech</strong> ones.
                </li>
                <li>
                    The required <strong>programming level</strong> to participate is <strong>high</strong>.
                </li>
                <li>
                    To join the challenge you'll need to <strong>upload your API</strong> to an Internet server.
                </li>
                <li>
                    Your API has to be <strong>accessible</strong> from the game server through an URL or IP address.
                </li>
            </ul>

            <h3>
                Restrictions
            </h3>

            <ul class="lead">
                <li>
                    No human interaction is allowed within the players' APIs.
                    That is, the APIs must decide their next move without human intervention.
                </li>
            </ul>

            <h3>
                Competition format
            </h3>

            <ul class="lead">
                <li>
                    The Competition format will depend on <strong>the number of participants</strong>.
                </li>
                <li>
                    The idea is to do some <strong>qualifying rounds</strong> to discard non-optimized APIs and then a
                    <strong>big final</strong>.
                </li>
            </ul>

            <div class="bs-callout bs-callout-danger">
                <h4>
                    Example
                </h4>

                <p>
                    50 participants:
                </p>

                <ul>
                    <li>
                        <strong>1st round</strong>:
                        50 players, 6 groups (4 of 8 players + 2 of 9 players)
                        &rarr; 18 players qualified for the next round.
                    </li>
                    <li>
                        <strong>2nd round</strong>:
                        18 players, 2 groups of 9 players
                        &rarr; 6 players qualified for the final.
                    </li>
                    <li>
                        <strong>Final</strong>:
                        6 players, 1 group of 9 players,
                        &rarr; 3 top players (1 winner).
                    </li>
                </ul>
            </div>

            <ul class="lead">
                <li>
                    The number of <strong>matches per group</strong> and the number of <strong>movements per
                    match</strong> will change from round to round (as well as the width and height of the board and
                    the number of enemies).
                </li>
                <li>
                    The duration of the challenge will depend on the <strong>number of participants</strong>, the
                    <strong>matches per group</strong> per each round and the <strong>movements per match</strong>
                    per each round.
                </li>
            </ul>
            <div class="bs-callout bs-callout-danger">
                <h4>
                    Example
                </h4>

                <p>
                    50 participants, 2 rounds and a big final:
                </p>

                <ul>
                    <li>
                        <strong>1st round</strong>:
                        6 groups, 2 matches per group, 50 movements per match (~2.5 minutes)
                        &rarr; 12 matches, ~30 minutes.
                    </li>
                    <li>
                        <strong>2nd round</strong>:
                        2 groups, 3 matches per group, 100 movements per match (~5 minutes)
                        &rarr; 6 matches, ~30 minutes.
                    </li>
                    <li>
                        <strong>Final</strong>:
                        1 group, 4 matches, 150 movements (~7.5 minutes)
                        &rarr; 4 matches, ~30 minutes.
                    </li>
                </ul>

                <p>
                    Total 1.5 hours.
                </p>
            </div>
        </div>
    </div>

    <div class="bg-info">
        <div class="container text-justify">
            <h2 id="api-documentation">
                API Documentation
            </h2>
            <p>
                Players are simple REST APIs with <strong>two endpoints</strong>:
            </p>
            <ul>
                <li>
                    <code>/name</code>:
                    should provide basic information on a player.
                    See <a href="#name-endpoint"><strong>Name Endpoint</strong></a> for more information.
                </li>
                <li>
                    <code>/move</code>:
                    will receive the game status and will respond with the next move for the player.
                    See the <a href="#move-endpoint"><strong>Move Endpoint</strong></a> for more information.
                </li>
            </ul>

            <h3 id="name-endpoint">
                Name Endpoint
            </h3>
            <p>
                Your <code>/name</code> URL API will receive a <strong>POST</strong> request without body.
                Reply with JSON format indicating the <strong>name</strong> of the player or team and the contact
                <strong>email</strong>.
            </p>

            <h4>
                Request format
            </h4>

            <pre>{% include 'default/rulesEndpointNameRequest.html.twig' %}</pre>

            <h4>
                Response format
            </h4>

            <pre>{% include 'default/rulesEndpointNameResponse.html.twig' %}</pre>

            <h3 id="move-endpoint">
                Move Endpoint
            </h3>
            <p>
                Your <code>/move</code> URL API will receive a POST request with the information about the visible
                part of the map in JSON format, and you need to reply with the next movement also in JSON format.
                See <a href="#visible-area">visible area</a> section for more information.
            </p>

            <h4>
                Request format
            </h4>

            <pre>{% include 'default/rulesEndpointMoveRequest.html.twig' %}</pre>

            <h4>
                Response format
            </h4>

            <pre>{% include 'default/rulesEndpointMoveResponse.html.twig' %}</pre>
        </div>

        <div class="bg-warning">
            <div class="container text-justify">
                <h2 id="visible-area">
                    Visible area
                </h2>

                <div class="row">
                    <div class="col-sm-12 col-md-6">
                        <p class="lead">
                            The board is a 0-based matrix, where [0, 0] is the upper left corner.
                            The height and width are sent in the <code>board.size.height</code> and <code>board.size.width</code>
                            vars of the request body in the <a href="#move-endpoint">Move endpoint</a>.
                        </p>
                        <p class="lead">
                            Each player has its own <strong>visible area</strong> based on its current position
                            (see <a href="#figure-1">Figure 1</a>).
                            The visible area is sent in the <code>player.area</code> var which is an object with four vars
                            <code>y1</code>, <code>x1</code>, <code>y2</code> and <code>x2</code>.
                        </p>
                        <p class="lead">
                            The information sent in <code>board.walls</code>, <code>enemies</code> and <code>players</code> vars
                            depends on the <strong>visible area</strong>.
                        </p>
                        <p class="lead">
                            The <strong>fire range</strong> also depends on the <strong>visible area</strong>. You can
                            shoot in any straight direction (up, down, left or right) and the fire range is limited to
                            what you can see.
                        </p>
                    </div>
                    <div class="col-sm-12 col-md-6">
                        <img class="img-responsive" src="{{ asset('images/halloween-screen02.png') }}">
                        <div class="text-center small" id="figure-1">
                            <i>Figure 1: Visible area</i>
                        </div>
                    </div>
                </div>

                <h3>
                    Example of request
                </h3>

                <pre>{% include 'default/rulesEndpointMoveRequestExample.html.twig' %}</pre>

                <h3>
                    Example of response
                </h3>

                <pre>{% include 'default/rulesEndpointMoveResponseExample.html.twig' %}</pre>
            </div>
        </div>

    </div>
{% endblock %}
